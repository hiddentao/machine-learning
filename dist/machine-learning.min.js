!function(t,e){"use strict";"function"==typeof define&&define.amd?define(["linear-algebra"],e):"object"==typeof exports?module.exports=e(require("linear-algebra")):t.machineLearning=e(t.linearAlgebra)}(this,function(t){"use strict";var e=Number.EPSILON||1e-12,r=function(t,e,r){throw new Error("machine-learning: ["+t+"_"+e+"] "+r)};return function(a){a||(a=t());var n={Matrix:a.Matrix,Vector:a.Vector};return n.normalizeFeatures=function(t){var r,a,i,s=t.cols,o=t.rows,u=new Array(o),c=new Array(s),d=new Array(s),l=new n.Vector.zero(o);for(a=0;s>a;++a){for(i=a+1,r=0;o>r;++r)l.data[0][r]=t.data[r][a],Array.isArray(u[r])||(u[r]=new Array(s+1),u[r][0]=1);for(c[a]=l.getSum()/o,r=0;o>r;++r)u[r][i]=t.data[r][a]-c[a],l.data[0][r]=u[r][i]*u[r][i];for(d[a]=Math.sqrt(l.getSum()/(o-1)),0===d[a]&&(d[a]=e),r=0;o>r;++r)u[r][i]/=d[a]}return{X:new n.Matrix(u),mean:new n.Matrix(c),std:new n.Matrix(d)}},n.gradientDescent=function(t,e,r,a,i){var s=n.normalizeFeatures(t);t=s.X;for(var o,u,c,d=t.rows,l=t.cols,h=new n.Vector.zero(d).trans_(),_=n.Vector.zero(l).trans_(),f=n.Vector.zero(l).trans_(),g=r(t,_,e),m=g,w=0;g>0&&i>w;){for(w++,c=t.dot(_).minus_(e),u=0;l>u;++u){for(o=0;d>o;++o)h.data[o][0]=c.data[o][0]*t.data[o][u];f.data[u][0]=a*h.getSum()/d}_.minus_(f),g=r(t,_,e),g>m?(_.plus_(f),a/=2):m=g}return{theta:_,cost:g,alpha:a,iters:w,mean:s.mean,std:s.std}},n.LinReg=function(t){this._dataX=[],this._dataY=[],this._nF=t},n.LinReg.prototype.addData=function(t){for(var e=t.length,a=0;e>a;++a)t[a].length<=this._nF&&r("LinReg","addData","Not enough data"),this._dataX.push(t[a].slice(0,this._nF)),this._dataY.push(t[a][this._nF])},n.LinReg.prototype.solve=function(t,e){var r=new n.Matrix(this._dataX),a=new n.Matrix(this._dataY).trans_();return this._results=n.gradientDescent(r,a,n.LinReg.costFunction,t,e)},n.LinReg.prototype.calculate=function(t){this._results||r("LinReg","calculate","Need to solve first");var e=new n.Matrix(t).minus_(this._results.mean).div_(this._results.std);return e.dot_(this._results.theta).data[0][0]},n.LinReg.costFunction=function(t,e,r){var a=r.rows,n=t.dot(e).minus_(r);return n.mul(n).getSum()/(2*a)},n}});